#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from Services import GamePlayer
from Services.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 discover(string serverName, string serverIP)'
  print '  string getName()'
  print '  i32 readID()'
  print '  i32 getTeam()'
  print '  void startGame(string server, i16 gameMode, i16 playerID, i16 teamMask)'
  print '  void message(i16 source, string message)'
  print '  void fire()'
  print '  void hit(i16 source, i16 weapon)'
  print '  void die()'
  print '  void revive()'
  print '  void endGame()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = GamePlayer.Client(protocol)
transport.open()

if cmd == 'discover':
  if len(args) != 2:
    print 'discover requires 2 args'
    sys.exit(1)
  pp.pprint(client.discover(args[0],args[1],))

elif cmd == 'getName':
  if len(args) != 0:
    print 'getName requires 0 args'
    sys.exit(1)
  pp.pprint(client.getName())

elif cmd == 'readID':
  if len(args) != 0:
    print 'readID requires 0 args'
    sys.exit(1)
  pp.pprint(client.readID())

elif cmd == 'getTeam':
  if len(args) != 0:
    print 'getTeam requires 0 args'
    sys.exit(1)
  pp.pprint(client.getTeam())

elif cmd == 'startGame':
  if len(args) != 4:
    print 'startGame requires 4 args'
    sys.exit(1)
  pp.pprint(client.startGame(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'message':
  if len(args) != 2:
    print 'message requires 2 args'
    sys.exit(1)
  pp.pprint(client.message(eval(args[0]),args[1],))

elif cmd == 'fire':
  if len(args) != 0:
    print 'fire requires 0 args'
    sys.exit(1)
  pp.pprint(client.fire())

elif cmd == 'hit':
  if len(args) != 2:
    print 'hit requires 2 args'
    sys.exit(1)
  pp.pprint(client.hit(eval(args[0]),eval(args[1]),))

elif cmd == 'die':
  if len(args) != 0:
    print 'die requires 0 args'
    sys.exit(1)
  pp.pprint(client.die())

elif cmd == 'revive':
  if len(args) != 0:
    print 'revive requires 0 args'
    sys.exit(1)
  pp.pprint(client.revive())

elif cmd == 'endGame':
  if len(args) != 0:
    print 'endGame requires 0 args'
    sys.exit(1)
  pp.pprint(client.endGame())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
